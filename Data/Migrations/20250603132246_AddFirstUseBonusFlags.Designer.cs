// <auto-generated />
using System;
using ClimbUpAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClimbUpAPI.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250603132246_AddFirstUseBonusFlags")]
    partial class AddFirstUseBonusFlags
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("ClimbUpAPI.Models.AccountDeletionRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("AccountDeletionRequests");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "871a497c-21a6-4e0a-a9c7-1e6a6b8f1a7e",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "a1b2c3d4-e5f6-7890-1234-567890abcdef",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("ClimbUpAPI.Models.AppTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Recurrence")
                        .HasColumnType("TEXT");

                    b.Property<int>("TargetProgress")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AppTasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Günlük toplam 50 dakika odaklanma süresine ulaşın.",
                            IsActive = true,
                            Recurrence = "Daily",
                            TargetProgress = 50,
                            TaskType = 1,
                            Title = "Günlük Odak Hedefi"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Haftalık toplam 240 dakika (4 saat) odaklanma süresine ulaşın.",
                            IsActive = true,
                            Recurrence = "Weekly",
                            TargetProgress = 240,
                            TaskType = 2,
                            Title = "Haftalık Odak Hedefi"
                        });
                });

            modelBuilder.Entity("ClimbUpAPI.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailConfirmationCode")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EmailConfirmationCodeExpiration")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompassActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEnergyBarActiveForNextSession")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<long>("Stepstones")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TotalSteps")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("Stepstones");

                    b.HasIndex("TotalSteps");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ClimbUpAPI.Models.Badges.BadgeDefinition", b =>
                {
                    b.Property<int>("BadgeDefinitionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CoreName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("MetricToTrack")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("BadgeDefinitionID");

                    b.ToTable("BadgeDefinitions");

                    b.HasData(
                        new
                        {
                            BadgeDefinitionID = 1,
                            CoreName = "Zirve Akıncısı",
                            Description = "Tamamlanan odak seansı sayısına göre kazanılır.",
                            MetricToTrack = "completed_focus_sessions"
                        },
                        new
                        {
                            BadgeDefinitionID = 2,
                            CoreName = "İrtifa Koleksiyoncusu",
                            Description = "Toplam odaklanma süresine göre kazanılır.",
                            MetricToTrack = "total_focus_duration_hours"
                        },
                        new
                        {
                            BadgeDefinitionID = 3,
                            CoreName = "Malzeme Depocusu",
                            Description = "Tamamlanan görev sayısına göre kazanılır.",
                            MetricToTrack = "total_todos_completed"
                        });
                });

            modelBuilder.Entity("ClimbUpAPI.Models.Badges.BadgeLevel", b =>
                {
                    b.Property<int>("BadgeLevelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BadgeDefinitionID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("IconURL")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("RequiredValue")
                        .HasColumnType("INTEGER");

                    b.HasKey("BadgeLevelID");

                    b.HasIndex("BadgeDefinitionID");

                    b.ToTable("BadgeLevels");

                    b.HasData(
                        new
                        {
                            BadgeLevelID = 1,
                            BadgeDefinitionID = 1,
                            Description = "5 odak seansı tamamla.",
                            IconURL = "https://res.cloudinary.com/dp7utrng4/image/upload/v1748396782/ilk_adim_mifzbj.png",
                            Level = 1,
                            Name = "İlk Adım",
                            RequiredValue = 5
                        },
                        new
                        {
                            BadgeLevelID = 2,
                            BadgeDefinitionID = 1,
                            Description = "20 odak seansı tamamla.",
                            IconURL = "https://res.cloudinary.com/dp7utrng4/image/upload/v1748396777/patika_takipcisi_vn63sd.png",
                            Level = 2,
                            Name = "Patika Takipçisi",
                            RequiredValue = 20
                        },
                        new
                        {
                            BadgeLevelID = 3,
                            BadgeDefinitionID = 1,
                            Description = "50 odak seansı tamamla.",
                            IconURL = "https://res.cloudinary.com/dp7utrng4/image/upload/v1748396778/kaya_tirmaniscisi_qmzbty.png",
                            Level = 3,
                            Name = "Kaya Tırmanışçısı",
                            RequiredValue = 50
                        },
                        new
                        {
                            BadgeLevelID = 4,
                            BadgeDefinitionID = 2,
                            Description = "Toplam 10 saat odaklan.",
                            IconURL = "https://res.cloudinary.com/dp7utrng4/image/upload/v1748396778/alcak_rakim_gozcusu_at9jj1.png",
                            Level = 1,
                            Name = "Alçak Rakım Gözcüsü",
                            RequiredValue = 10
                        },
                        new
                        {
                            BadgeLevelID = 5,
                            BadgeDefinitionID = 2,
                            Description = "Toplam 50 saat odaklan.",
                            IconURL = "https://res.cloudinary.com/dp7utrng4/image/upload/v1748396777/orta_rakim_kasifi_chunvy.png",
                            Level = 2,
                            Name = "Orta Rakım Kaşifi",
                            RequiredValue = 50
                        },
                        new
                        {
                            BadgeLevelID = 6,
                            BadgeDefinitionID = 2,
                            Description = "Toplam 150 saat odaklan.",
                            IconURL = "https://res.cloudinary.com/dp7utrng4/image/upload/v1748396778/yuksek_rakim_uzmani_dlkob3.png",
                            Level = 3,
                            Name = "Yüksek Rakım Uzmanı",
                            RequiredValue = 150
                        },
                        new
                        {
                            BadgeLevelID = 7,
                            BadgeDefinitionID = 3,
                            Description = "10 görev tamamla.",
                            IconURL = "https://res.cloudinary.com/dp7utrng4/image/upload/v1748396778/temel_malzemeler_kfuksw.png",
                            Level = 1,
                            Name = "Temel Malzemeler",
                            RequiredValue = 10
                        },
                        new
                        {
                            BadgeLevelID = 8,
                            BadgeDefinitionID = 3,
                            Description = "50 görev tamamla.",
                            IconURL = "https://res.cloudinary.com/dp7utrng4/image/upload/v1748396779/tirmanis_kiti_n9mg6o.png",
                            Level = 2,
                            Name = "Tırmanış Kiti",
                            RequiredValue = 50
                        },
                        new
                        {
                            BadgeLevelID = 9,
                            BadgeDefinitionID = 3,
                            Description = "150 görev tamamla.",
                            IconURL = "https://res.cloudinary.com/dp7utrng4/image/upload/v1748396777/ekspedisyon_hazirligi_l3ysxu.png",
                            Level = 3,
                            Name = "Ekspedisyon Hazırlığı",
                            RequiredValue = 150
                        });
                });

            modelBuilder.Entity("ClimbUpAPI.Models.Badges.UserBadge", b =>
                {
                    b.Property<int>("UserBadgeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BadgeLevelID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateAchieved")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserBadgeID");

                    b.HasIndex("BadgeLevelID");

                    b.HasIndex("UserId");

                    b.ToTable("UserBadges");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.FocusSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompletedCycles")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CurrentStateEndTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("CustomDuration")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FocusLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReflectionNotes")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SessionTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ToDoItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalBreakDuration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalWorkDuration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SessionTypeId");

                    b.HasIndex("ToDoItemId");

                    b.HasIndex("UserId");

                    b.ToTable("FocusSessions");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.FocusSessionTag", b =>
                {
                    b.Property<int>("FocusSessionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FocusSessionId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("FocusSessionTags");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.SessionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BreakDuration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSystemDefined")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("NumberOfCycles")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("WorkDuration")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Name")
                        .IsUnique()
                        .HasFilter("IsSystemDefined = 0");

                    b.ToTable("SessionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BreakDuration = 300,
                            IsActive = true,
                            IsSystemDefined = true,
                            Name = "Classic Pomodoro (25/5)",
                            NumberOfCycles = 4,
                            WorkDuration = 1500
                        },
                        new
                        {
                            Id = 2,
                            BreakDuration = 600,
                            IsActive = true,
                            IsSystemDefined = true,
                            Name = "Deep Work",
                            NumberOfCycles = 1,
                            WorkDuration = 3600
                        },
                        new
                        {
                            Id = 3,
                            BreakDuration = 180,
                            IsActive = true,
                            IsSystemDefined = true,
                            Name = "Quick Focus",
                            NumberOfCycles = 1,
                            WorkDuration = 900
                        },
                        new
                        {
                            Id = 4,
                            BreakDuration = 600,
                            IsActive = true,
                            IsSystemDefined = true,
                            Name = "Work Sprint",
                            NumberOfCycles = 2,
                            WorkDuration = 2700
                        },
                        new
                        {
                            Id = 5,
                            BreakDuration = 300,
                            IsActive = true,
                            IsSystemDefined = true,
                            Name = "Focus Sprint (25/5)",
                            WorkDuration = 1500
                        });
                });

            modelBuilder.Entity("ClimbUpAPI.Models.StoreItem", b =>
                {
                    b.Property<int>("StoreItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("EffectDetails")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsConsumable")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaxQuantityPerUser")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("PriceSS")
                        .HasColumnType("INTEGER");

                    b.HasKey("StoreItemId");

                    b.ToTable("StoreItems");

                    b.HasData(
                        new
                        {
                            StoreItemId = 1,
                            Category = "Kozmetik",
                            Description = "Profilin için özel bir keşifçi simgesi.",
                            EffectDetails = "{\"effect\": \"profile_icon_unlock\", \"icon_id\": \"alpha_explorer\"}",
                            IconUrl = "https://res.cloudinary.com/dp7utrng4/image/upload/v1700000001/store_icons/discovery_badge_alpha.png",
                            IsConsumable = false,
                            Name = "Keşif Simgesi Alfa",
                            PriceSS = 25
                        },
                        new
                        {
                            StoreItemId = 2,
                            Category = "Kozmetik",
                            Description = "Uygulama arayüzün için ferahlatıcı bir dağ manzarası teması.",
                            EffectDetails = "{\"effect\": \"theme_unlock\", \"theme_id\": \"mountain_peak\"}",
                            IconUrl = "https://res.cloudinary.com/dp7utrng4/image/upload/v1700000002/store_icons/theme_mountain_peak.png",
                            IsConsumable = false,
                            Name = "Zirve Manzarası Teması",
                            PriceSS = 45
                        },
                        new
                        {
                            StoreItemId = 3,
                            Category = "İşlevsel",
                            Description = "Bir sonraki tamamladığın görev için ekstra +25 Steps kazandırır.",
                            EffectDetails = "{\"type\": \"todo_steps_bonus\", \"amount\": 25}",
                            IconUrl = "https://res.cloudinary.com/dp7utrng4/image/upload/v1700000003/store_icons/item_compass.png",
                            IsConsumable = true,
                            MaxQuantityPerUser = 5,
                            Name = "Pusula",
                            PriceSS = 10
                        },
                        new
                        {
                            StoreItemId = 4,
                            Category = "İşlevsel",
                            Description = "Bir sonraki odak seansından kazanacağın temel Steps miktarını %15 artırır.",
                            EffectDetails = "{\"type\": \"session_steps_boost_percentage\", \"amount\": 15}",
                            IconUrl = "https://res.cloudinary.com/dp7utrng4/image/upload/v1700000004/store_icons/item_energy_bar.png",
                            IsConsumable = true,
                            MaxQuantityPerUser = 3,
                            Name = "Enerji Barı",
                            PriceSS = 20
                        },
                        new
                        {
                            StoreItemId = 5,
                            Category = "Seri Koruyucular",
                            Description = "Bir günlük serini kaybetmeni önler. Ayda bir kullanılabilir (bu kural servis katmanında uygulanmalı).",
                            EffectDetails = "{\"type\": \"streak_shield\", \"duration_days\": 1}",
                            IconUrl = "https://res.cloudinary.com/dp7utrng4/image/upload/v1700000005/store_icons/item_streak_shield.png",
                            IsConsumable = true,
                            MaxQuantityPerUser = 1,
                            Name = "Günlük İzin",
                            PriceSS = 120
                        });
                });

            modelBuilder.Entity("ClimbUpAPI.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSystemDefined")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Name")
                        .IsUnique()
                        .HasFilter("IsSystemDefined = 0");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#FF5733",
                            Description = "Work-related tasks",
                            IsArchived = false,
                            IsSystemDefined = true,
                            Name = "Work"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#FF5733",
                            Description = "Study-related tasks",
                            IsArchived = false,
                            IsSystemDefined = true,
                            Name = "Study"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#FF5733",
                            Description = "Personal tasks and projects",
                            IsArchived = false,
                            IsSystemDefined = true,
                            Name = "Personal"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#FF5733",
                            Description = "High-priority tasks",
                            IsArchived = false,
                            IsSystemDefined = true,
                            Name = "Urgent"
                        },
                        new
                        {
                            Id = 5,
                            Color = "#FF5733",
                            Description = "Significant but not necessarily urgent tasks",
                            IsArchived = false,
                            IsSystemDefined = true,
                            Name = "Important"
                        });
                });

            modelBuilder.Entity("ClimbUpAPI.Models.ToDoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("AccumulatedWorkDuration")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AutoCompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ForDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ManuallyCompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("TargetWorkDuration")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UserIntendedStartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ToDoItems");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.ToDoTag", b =>
                {
                    b.Property<int>("ToDoItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ToDoItemId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ToDoTags");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.UserAppTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentProgress")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AppTaskId");

                    b.HasIndex("AppUserId");

                    b.ToTable("UserAppTasks");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.UserRefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.UserSessionTypeUsage", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("SessionTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AwardedFirstUseBonus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUsedDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("Score")
                        .HasColumnType("REAL");

                    b.HasKey("UserId", "SessionTypeId");

                    b.HasIndex("SessionTypeId");

                    b.ToTable("UserSessionTypeUsages");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.UserStats", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentStreakDays")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastSessionCompletionDate")
                        .HasColumnType("TEXT");

                    b.Property<long>("LongestSingleSessionDurationSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LongestStreakDays")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalCompletedSessions")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TotalFocusDurationSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalStartedSessions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalToDosCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalToDosCompletedWithFocus")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId");

                    b.HasIndex("TotalCompletedSessions");

                    b.HasIndex("TotalFocusDurationSeconds");

                    b.HasIndex("TotalToDosCompleted");

                    b.ToTable("UserStats");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.UserStoreItem", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("StoreItemId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "StoreItemId");

                    b.HasIndex("StoreItemId");

                    b.ToTable("UserStoreItems");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.UserTagUsage", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AwardedFirstUseBonus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUsedDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("Score")
                        .HasColumnType("REAL");

                    b.HasKey("UserId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("UserTagUsages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ClimbUpAPI.Models.AccountDeletionRequest", b =>
                {
                    b.HasOne("ClimbUpAPI.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.Badges.BadgeLevel", b =>
                {
                    b.HasOne("ClimbUpAPI.Models.Badges.BadgeDefinition", "BadgeDefinition")
                        .WithMany("BadgeLevels")
                        .HasForeignKey("BadgeDefinitionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BadgeDefinition");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.Badges.UserBadge", b =>
                {
                    b.HasOne("ClimbUpAPI.Models.Badges.BadgeLevel", "BadgeLevel")
                        .WithMany("UserBadges")
                        .HasForeignKey("BadgeLevelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClimbUpAPI.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BadgeLevel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.FocusSession", b =>
                {
                    b.HasOne("ClimbUpAPI.Models.SessionType", "SessionType")
                        .WithMany("FocusSessions")
                        .HasForeignKey("SessionTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ClimbUpAPI.Models.ToDoItem", "ToDoItem")
                        .WithMany("FocusSessions")
                        .HasForeignKey("ToDoItemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ClimbUpAPI.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SessionType");

                    b.Navigation("ToDoItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.FocusSessionTag", b =>
                {
                    b.HasOne("ClimbUpAPI.Models.FocusSession", "FocusSession")
                        .WithMany("FocusSessionTags")
                        .HasForeignKey("FocusSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimbUpAPI.Models.Tag", "Tag")
                        .WithMany("FocusSessionTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FocusSession");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.SessionType", b =>
                {
                    b.HasOne("ClimbUpAPI.Models.AppUser", "User")
                        .WithMany("SessionTypes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.Tag", b =>
                {
                    b.HasOne("ClimbUpAPI.Models.AppUser", "User")
                        .WithMany("Tags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.ToDoItem", b =>
                {
                    b.HasOne("ClimbUpAPI.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.ToDoTag", b =>
                {
                    b.HasOne("ClimbUpAPI.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimbUpAPI.Models.ToDoItem", "ToDoItem")
                        .WithMany("ToDoTags")
                        .HasForeignKey("ToDoItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("ToDoItem");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.UserAppTask", b =>
                {
                    b.HasOne("ClimbUpAPI.Models.AppTask", "AppTaskDefinition")
                        .WithMany("UserAppTasks")
                        .HasForeignKey("AppTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimbUpAPI.Models.AppUser", "AppUser")
                        .WithMany("UserAppTasks")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppTaskDefinition");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.UserRefreshToken", b =>
                {
                    b.HasOne("ClimbUpAPI.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.UserSessionTypeUsage", b =>
                {
                    b.HasOne("ClimbUpAPI.Models.SessionType", "SessionType")
                        .WithMany()
                        .HasForeignKey("SessionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimbUpAPI.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SessionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.UserStats", b =>
                {
                    b.HasOne("ClimbUpAPI.Models.AppUser", "User")
                        .WithOne("UserStats")
                        .HasForeignKey("ClimbUpAPI.Models.UserStats", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.UserStoreItem", b =>
                {
                    b.HasOne("ClimbUpAPI.Models.StoreItem", "StoreItem")
                        .WithMany("UserStoreItems")
                        .HasForeignKey("StoreItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimbUpAPI.Models.AppUser", "User")
                        .WithMany("UserStoreItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.UserTagUsage", b =>
                {
                    b.HasOne("ClimbUpAPI.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimbUpAPI.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ClimbUpAPI.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ClimbUpAPI.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ClimbUpAPI.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ClimbUpAPI.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimbUpAPI.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ClimbUpAPI.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClimbUpAPI.Models.AppTask", b =>
                {
                    b.Navigation("UserAppTasks");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.AppUser", b =>
                {
                    b.Navigation("SessionTypes");

                    b.Navigation("Tags");

                    b.Navigation("UserAppTasks");

                    b.Navigation("UserStats");

                    b.Navigation("UserStoreItems");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.Badges.BadgeDefinition", b =>
                {
                    b.Navigation("BadgeLevels");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.Badges.BadgeLevel", b =>
                {
                    b.Navigation("UserBadges");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.FocusSession", b =>
                {
                    b.Navigation("FocusSessionTags");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.SessionType", b =>
                {
                    b.Navigation("FocusSessions");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.StoreItem", b =>
                {
                    b.Navigation("UserStoreItems");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.Tag", b =>
                {
                    b.Navigation("FocusSessionTags");
                });

            modelBuilder.Entity("ClimbUpAPI.Models.ToDoItem", b =>
                {
                    b.Navigation("FocusSessions");

                    b.Navigation("ToDoTags");
                });
#pragma warning restore 612, 618
        }
    }
}
